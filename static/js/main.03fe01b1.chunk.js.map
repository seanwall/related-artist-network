{"version":3,"sources":["SpotifyService.js","Node.js","Edge.js","Label.js","Graph.js","App.js","serviceWorker.js","index.js"],"names":["accessToken","fetch","then","response","json","token","query","encodeURIComponent","trim","headers","artist_id","Node","props","state","mouse_over","track_title","initializePreview","node","track_promise","track","preview_url","preview_audio","Audio","name","handleMouseHover","mouse_action","setHovered","id","setState","setTimeout","play","pause","currentTime","this","prevProps","sources","includes","hovered_node_id","targets","transform","getNodeTransform","className","getClassName","radius","getRadius","x_preview_text","view_pos","x","window","innerWidth","y_preview_text","y","preview_text","key","onClick","expand","onMouseLeave","onMouseOver","textAnchor","React","cloneElement","fill","r","Component","Edge","edge","source","target","class_name","x1","x2","y1","y2","Label","is_highlighted","track_id","initializeNodeInfo","isHighlighted","text","getLabelText","href","width","height","innerHeight","Graph","dragging","drag","nodes","edges","force","initializeNewGraph","initial_node","initial_artist","popularity","expandGraph","startD3Simulation","getRelatedArtists","SpotifyService","artists","getTrackForArtist","tracks","expanded_node","related_artists","new_nodes","new_edges","forEach","artist","new_node_id","push","filter","existing_node","map","some","artist_node","new_edge_id","existing_edge","concat","setHoveredNode","node_id","startDrag","e","button","x_curr","pageXOffset","y_curr","pageYOffset","rel_pos","screenX","screenY","init_pos","stopPropagation","preventDefault","stopDrag","dy","d3","strength","n","distance","iterations","on","forceUpdate","fx","fy","links","alpha","restart","edge_bed","node_bed","label_bed","expandNode","labels","foreground_labels","viewBox","overflow","onMouseDown","onMouseMove","onMouseUp","xlinkHref","App","search_query","searchArtists","items","setInitialArtist","artist_arr","length","console","log","artist_obj","searchGroup","onSubmit","onChange","event","value","placeholder","type","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.03fe01b1.chunk.js","sourcesContent":["var accessToken = ''\n\nconst clientSpotifyAuth = () =>\n    fetch(\"https://young-garden-14101.herokuapp.com/spotify/auth\")\n        .then(response => response.json())\n        .then(token => accessToken = token)\n\nconst searchArtists = (query) =>\n    fetch(`https://api.spotify.com/v1/search?q=${encodeURIComponent(query.trim())}&type=artist`, {\n        headers: {\n            'Authorization': 'Bearer ' + accessToken\n        }\n    }).then(response => response.json())\n\nconst getRelatedArtists = (artist_id) =>\n    fetch(`https://api.spotify.com/v1/artists/${artist_id}/related-artists`, {\n        headers: {\n            'Authorization': 'Bearer ' + accessToken\n        }\n    }).then(response => response.json())\n\nconst getTopTracks = (artist_id) =>\n    fetch(`https://api.spotify.com/v1/artists/${artist_id}/top-tracks?country=US`, {\n        headers: {\n            'Authorization': 'Bearer ' + accessToken\n        }\n    }).then(response => response.json())\n\nexport default {\n    clientSpotifyAuth,\n    searchArtists,\n    getRelatedArtists,\n    getTopTracks\n}","import React from 'react';\nimport './Node.css'\n\nexport default class Node extends React.Component {\n    state = {\n        mouse_over: false,\n    }\n\n    preview_audio;\n    track_title = \"\"\n\n    constructor(props) {\n        super(props)\n    }\n\n    componentDidMount() {\n        this.initializePreview()\n    }\n\n    componentDidUpdate(prevProps) {\n        if(this.props.node.id !== prevProps.node.id) {\n            this.preview_audio = null;\n            this.track_title = \"\";\n\n            this.initializePreview()\n        }\n    }\n\n    initializePreview = () => {\n        // Track URL is populated asynchronously in Graph.js so that rendering can take place without\n        // waiting for spotify requests, need to wait for track url promise to resolve before creating\n        // preview audio object\n        this.props.node.track_promise.then(track => {\n            if (track) {\n                if (track.preview_url) this.preview_audio = new Audio(track.preview_url)\n                this.track_title = track.name\n            }\n\n        })\n    }\n\n    handleMouseHover = (mouse_action) => {\n        switch(mouse_action) {\n            case 'over':\n                if(!this.state.mouse_over) {\n                    this.props.setHovered(this.props.node.id)\n                    this.setState({\n                        mouse_over: true\n                    })\n\n                    if (this.preview_audio) {\n                        setTimeout(() => {\n                            //Check that 'mouseOver' still true before playing audio\n                            if (this.state.mouse_over) this.preview_audio.play()\n                        }, 500)\n                    }\n                }\n\n                break;\n            case 'leave':\n                this.props.setHovered(null)\n                this.setState({\n                    mouse_over: false\n                })\n\n                if (this.preview_audio) {\n                    this.preview_audio.pause()\n                    this.preview_audio.currentTime = 0\n                }\n\n                break;\n        }\n    }\n\n    getClassName() {\n        if(this.state.mouse_over) {\n            return 'active-node'\n        }\n        else if(this.props.node.sources && this.props.node.sources.includes(this.props.hovered_node_id)) {\n            return 'child-node'\n        }\n        else if(this.props.node.targets && this.props.node.targets.includes(this.props.hovered_node_id)){\n            return 'parent-node'\n        }\n        else {\n            return 'hidden-node'\n        }\n    }\n\n    render() {\n        const transform = this.props.getNodeTransform();\n        const className = this.getClassName()\n        const radius = this.props.getRadius()\n        const x_preview_text = this.props.view_pos.x + window.innerWidth - 20\n        const y_preview_text = this.props.view_pos.y + 25\n        const preview_text = <tspan className='preview-text' y={y_preview_text} x={x_preview_text}>{this.props.node.name} - {this.track_title}</tspan>\n\n        return (\n            <g className={className} id={this.props.node.id} key={this.props.node.id}\n                onClick={() => this.props.expand()}\n                onMouseLeave={() => this.handleMouseHover('leave')}\n                onMouseOver={() => this.handleMouseHover('over')}>\n                {\n                    this.state.mouse_over &&\n                    <text id={`${this.props.node.id}-preview`} textAnchor={\"end\"}>\n                        {React.cloneElement(preview_text, {className: 'preview-underlay'})}\n                        {React.cloneElement(preview_text, {className: 'preview-fill'})}\n                        {\n                            !this.preview_audio &&\n                            <tspan fill=\"red\" y={y_preview_text + 20} x={x_preview_text}>No audio sample available</tspan>\n                        }\n                    </text>\n                }\n                <circle transform={transform} className={className} r={radius}></circle>\n                            </g>)\n    }\n}","import React from 'react';\nimport './Edge.css';\n\nexport default class Edge extends React.Component {\n    constructor(props){\n        super(props)\n    }\n\n    getClassName() {\n        if(this.props.hovered_node_id === this.props.edge.source.id) {\n            return 'child-edge'\n        }\n        else if(this.props.hovered_node_id === this.props.edge.target.id){\n            return 'parent-edge'\n        }\n        else {\n            return 'hidden-edge'\n        }\n    }\n\n    render() {\n        let class_name = this.getClassName()\n\n        return <line className={class_name} key={this.props.edge.id}\n                     x1={this.props.edge.source.x} x2={this.props.edge.target.x} y1={this.props.edge.source.y} y2={this.props.edge.target.y} />\n    }\n}","import React from 'react';\nimport './Label.css'\n\nexport default class Label extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    state = {\n        is_highlighted: false\n    }\n\n    track_id = ''\n\n    componentDidMount() {\n        this.initializeNodeInfo()\n    }\n\n    componentDidUpdate(prevProps) {\n        if(this.props.hovered_node_id !== prevProps.hovered_node_id ||\n           this.props.node.id !== prevProps.node.id) {\n            this.initializeNodeInfo()\n        }\n    }\n\n    initializeNodeInfo = () => {\n        this.setState({\n            is_highlighted: this.isHighlighted()\n        })\n        this.props.node.track_promise.then(track => {\n            if (track) {\n                this.track_id = track.id\n            }\n\n        })\n    }\n\n    getClassName() {\n        if(this.props.node.id === this.props.hovered_node_id) {\n            return 'active-label'\n        }\n        if(this.props.node.sources && this.props.node.sources.includes(this.props.hovered_node_id)) {\n            return 'child-label'\n        }\n        else if(this.props.node.targets && this.props.node.targets.includes(this.props.hovered_node_id)){\n            return 'parent-label'\n        }\n    }\n\n    isHighlighted() {\n        return (this.props.node.id === this.props.hovered_node_id ||\n            (this.props.node.sources && this.props.node.sources.includes(this.props.hovered_node_id)) ||\n            (this.props.node.targets && this.props.node.targets.includes(this.props.hovered_node_id)))\n    }\n\n    render () {\n        let class_name = this.getClassName()\n        let text = this.props.getLabelText()\n        return (\n            <g>\n                {(this.state.is_highlighted === true) &&\n                    <g id={`${this.props.node.id}-label`}>\n                        {React.cloneElement(text, {className: class_name})}\n                        {React.cloneElement(text, {className: 'label-fill'})}\n                    </g>\n                }\n                {(this.state.is_highlighted !== true) &&\n                    <a href={`spotify:track:${this.track_id}`}>\n                        {React.cloneElement(text, {className: 'hidden-label'})}\n                    </a>\n                }\n            </g>\n        )\n    }\n}","import React from 'react';\nimport * as d3 from 'd3';\nimport SpotifyService from \"./SpotifyService\";\nimport Node from './Node.js';\nimport Edge from './Edge.js';\nimport Label from './Label.js';\nimport './Graph.css'\nimport './Label.css'\nimport './Node.css'\nimport './Edge.css'\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\n// Node object structure:\n/*\n    {\n        id: String,\n        sources: [String],\n        targets: [String], - Optional (populated once node is explored)\n        name: String,\n        popularity: Number,\n        x: Number,\n        y: Number,\n        track_promise: Promise<String>\n    }\n */\n\n// Edge object structure:\n/*\n    {\n        id: String,\n        source: String,\n        target: String\n    }\n */\n\nexport default class Graph extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    state = {\n        hovered_node_id: null,\n        dragging: false,\n        view_pos: {\n            x: 0,\n            y: 0\n        },\n        /*\n         Position information used for dragging logic\n         drag: {\n            rel_pos: {\n                x: Number,\n                y: Number\n            }\n            init_pos: {\n                x: Number,\n                y: Number\n            }\n         }\n         */\n        drag: null\n    }\n\n    // Storing nodes and edges outside of state as we'll be managing rendering manually\n    // as D3 force simulation ticks (doesnt play nice with react trying to control rendering\n    // when state changes)\n    nodes = [];\n    edges = [];\n\n    force = null;\n\n    componentDidMount() {\n        this.initializeNewGraph()\n    }\n\n    componentDidUpdate(prevProps) {\n        if(this.props.initial_artist !== prevProps.initial_artist){\n            this.initializeNewGraph()\n        }\n    }\n\n    //Creates initial node from prop passed from App.js,\n    initializeNewGraph = () => {\n        // Center visualization when initialized\n        this.setState({\n            view_pos: {\n                x: 0,\n                y: 0\n            }\n        })\n\n        const initial_node = {\n            id: this.props.initial_artist.id,\n            sources: [],\n            name: this.props.initial_artist.name,\n            popularity: this.props.initial_artist.popularity,\n            x: 0,\n            y: 0,\n            track_promise: this.props.initial_artist.track_promise\n        }\n        //Initializing nodes & edges - or resetting them if new Graph is being created\n        this.nodes = [initial_node]\n        this.edges = []\n\n        this.expandGraph(initial_node).then(response => {\n            // Don't start force simulation until graph is populated from spotify query\n            this.startD3Simulation()\n        })\n    }\n\n    getRelatedArtists = (artist_id) => {\n        return SpotifyService.getRelatedArtists(artist_id).then(response => response.artists)\n    }\n\n    getTrackForArtist = (artist_id) => {\n        return SpotifyService.getTopTracks(artist_id).then(response => response.tracks[0])\n    }\n\n    // Initializes D3 force simulation and sets 'tick' and 'end' triggers\n    startD3Simulation() {\n        this.force = d3.forceSimulation(this.nodes)\n            .force(\"charge\", d3.forceManyBody().strength(-1000))\n            .force(\"link\", d3.forceLink(this.edges).id(n => n.id).distance(90))\n            .force(\"collide\", d3.forceCollide([25]).iterations([5]))\n            .force(\"center\", d3.forceCenter().x(width / 2).y(height / 2))\n\n        // Forcing re-render on each tick of the force simulation\n        this.force.on('tick', () => {\n            this.forceUpdate()\n        });\n    }\n\n    // Expands the graph with given node's related artists and triggers the force simulation\n    expandNode(node) {\n        // Fix nodes and remove centering force once a new node is expanded\n        this.nodes.map((n) => {\n            if(n.id != node.id) {\n                n.fx = n.x\n                n.fy = n.y\n            }\n            else {\n                n.fx = null\n                n.fy = null\n            }\n        })\n        this.force.force(\"center\", null)\n\n        this.expandGraph(node).then(response => {\n            // Update force simulation with new set of nodes & edges and restart simulation\n            this.force.nodes(this.nodes)\n            this.force.force(\"link\").links(this.edges)\n            this.force.alpha(1).restart();\n        })\n    }\n\n    // Given an artist node, retrieves related artists for that artist, adds new nodes and edges to the graph as needed\n    expandGraph = (expanded_node) => {\n        return this.getRelatedArtists(expanded_node.id).then((related_artists) => {\n            let new_nodes = []\n            let new_edges = []\n            // Keeping track of artists related to expanded node to pass to expanded node object - used\n            // to know which nodes to highlight when a node is hovered\n            let targets = []\n\n            related_artists.forEach(artist => {\n                const new_node_id = artist.id;\n                targets.push(new_node_id)\n\n                // Check for node dupes\n                this.nodes.filter((existing_node) => existing_node.id === artist.id)\n                          .map((existing_node) => existing_node.sources.push(expanded_node.id))\n                if(!this.nodes.some((existing_node) => existing_node.id === artist.id)) {\n                    // Want spotify get track calls to happen asynchronously, so nodes can be\n                    // animated without waiting for all calls - give nodes the getTrack spotify call promise\n                    // so that track url for preview can be resolved later\n                    let track_promise = this.getTrackForArtist(artist.id).then(track => track)\n                    let artist_node = {\n                        id:artist.id,\n                        sources: [expanded_node.id],\n                        name:artist.name,\n                        popularity:artist.popularity,\n                        x: 0,\n                        y:0,\n                        track_promise: track_promise\n                    }\n                    new_nodes.push(artist_node)\n                }\n                const new_edge_id = `e${expanded_node.id}-${new_node_id}`\n                // Check for edge dupes\n                if(!this.edges.some((existing_edge) => existing_edge.id === new_edge_id)) {\n                    new_edges.push({id:new_edge_id, source:expanded_node.id ,target:new_node_id})\n                }\n            })\n\n            expanded_node.targets = targets\n\n            this.nodes = this.nodes.concat(new_nodes)\n            this.edges = this.edges.concat(new_edges)\n        })\n    }\n\n    setHoveredNode = (node_id) => {\n        this.setState({\n            hovered_node_id: node_id\n        })\n    }\n\n    startDrag = (e) => {\n        // Starting a drag only on left mouse button click\n        if (e.button === 0) {\n            let x_curr = window.pageXOffset;\n            let y_curr = window.pageYOffset;\n            this.setState({\n                dragging: true,\n                drag: {\n                    rel_pos: {\n                        x: e.screenX - x_curr,\n                        y: e.screenY - y_curr\n                    },\n                    init_pos: {\n                        x: this.state.view_pos.x,\n                        y: this.state.view_pos.y\n                    }\n                }\n            })\n            e.stopPropagation()\n            e.preventDefault()\n        }\n    }\n\n    stopDrag = (e) => {\n        this.setState({dragging: false})\n        e.stopPropagation()\n        e.preventDefault()\n    }\n\n    drag = (e) => {\n        if (this.state.dragging) {\n            this.setState({\n                view_pos: {\n                    x: this.state.drag.init_pos.x + (this.state.drag.rel_pos.x - e.screenX),\n                    y: this.state.drag.init_pos.y + (this.state.drag.rel_pos.y - e.screenY)\n                }\n            })\n            e.stopPropagation()\n            e.preventDefault()\n        }\n    }\n\n    // Rendering calculations for nodes used for base nodes in Graph render and in Node component rendering\n    getRadius = (popularity) => (popularity/5 + 2)\n    getLabelText = (node) => <text className=\"label\" textAnchor={\"middle\"} y={node.y + this.getRadius(node.popularity) + 7} x={node.x} dy='.5em'>{node.name}</text>\n    getNodeTransform = (node) => 'translate(' + node.x + ',' + node.y + ')'\n\n    render() {\n        // Manually forcing react to render whenever D3 force sim ticks, so we recreate nodes/edges\n        // on each re-render with the node/edge data being modified by D3 force sim.\n\n        // SVG uses 'painter' pattern for deciding element z-index priority - since priority changes\n        // dynamically on hovering, I found easiest & cleanest solution was to draw base circles and\n        // labels then redraw on top of those to highlight when necessary.\n        let edge_bed = this.edges.map((edge) => {\n            return (<line className='edge' key={edge.id}\n                          x1={edge.source.x} x2={edge.target.x} y1={edge.source.y} y2={edge.target.y} />)\n        })\n        let node_bed = this.nodes.map((node) =>\n                    <circle className={'node'}\n                            r={this.getRadius(node.popularity)}\n                            transform={this.getNodeTransform(node)}></circle>);\n\n        let label_bed = this.nodes.map((node) => this.getLabelText(node));\n\n        let edges = this.edges.map((edge) => {\n            return (\n                <Edge edge={edge} hovered_node_id={this.state.hovered_node_id}/>\n            );\n        });\n\n        let nodes = this.nodes.map((node) =>\n            <Node node={node} hovered_node_id={this.state.hovered_node_id}\n                  expand={() => this.expandNode(node)} setHovered={this.setHoveredNode}\n                  getRadius={() => this.getRadius(node.popularity)}\n                  getNodeTransform={() => this.getNodeTransform(node)}\n                  view_pos={this.state.view_pos}/>\n        );\n\n        let labels = this.nodes.map((node) =>\n            <Label node={node} hovered_node_id={this.state.hovered_node_id}\n                   getLabelText={() => this.getLabelText(node)}/>\n        )\n\n        let foreground_labels = []\n        if (this.state.hovered_node_id) {\n            foreground_labels = this.nodes.map((node) => {\n                if(this.state.hovered_node_id === node.id ||\n                   node.sources.includes(this.state.hovered_node_id) ||\n                   (node.targets && node.targets.includes(this.state.hovered_node_id))) {\n                return <Label node={node} hovered_node_id={this.state.hovered_node_id}\n                           getLabelText={() => this.getLabelText(node)}/>\n                }\n            })\n        }\n\n        return (\n            <svg className='graph'\n                 width={width}\n                 height={height}\n                 viewBox={`${this.state.view_pos.x} ${this.state.view_pos.y} ${width} ${height}`}\n                 overflow={\"auto\"}\n                 onMouseDown={(e) => this.startDrag(e)}\n                 onMouseMove={(e) => this.drag(e)}\n                 onMouseUp={(e) => this.stopDrag(e)}>\n                <g>\n                    <g id={\"base_edges\"}>\n                        {edge_bed}\n                    </g>\n                    <g id={\"base_nodes\"}>\n                        {node_bed}\n                    </g>\n                    <g id={\"base_labels\"}>\n                        {label_bed}\n                    </g>\n                    <g id={\"edges\"}>\n                        {edges}\n                    </g>\n                    <g id={\"labels\"}>\n                        {labels}\n                    </g>\n                    <g id={\"nodes\"}>\n                        {nodes}\n                    </g>\n                    {foreground_labels}\n                    {this.state.hovered_node_id &&\n                    <g>\n                        <use xlinkHref={`#${this.state.hovered_node_id}-label`}></use>\n                        <use xlinkHref={`#${this.state.hovered_node_id}-preview`}></use>\n                    </g>\n                    }\n                </g>\n            </svg>\n        );\n\n    }\n}","import React from 'react';\nimport './App.css';\nimport SpotifyService from './SpotifyService.js';\nimport Graph from './Graph.js';\n\nclass App extends React.Component {\n  state = {\n      initial_artist: null,\n      search_query: ''\n  }\n\n  componentDidMount() {\n      SpotifyService.clientSpotifyAuth();\n  }\n\n  //Queries spotify service for artists using given search param\n  searchArtists = (search_query) => {\n      return SpotifyService.searchArtists(search_query).then(response => response.artists.items)\n  }\n\n  getTrackForArtist = (artist_id) => {\n        return SpotifyService.getTopTracks(artist_id).then(response => response.tracks[0])\n  }\n\n  //Given a search query, retrieves artists from spotify and creates an initial node for the graph\n  setInitialArtist = (search_query) => {\n    if(search_query) {\n        this.searchArtists(search_query).then(artist_arr => {\n            this.setState({search_query: ''})\n            if (artist_arr.length === 0) {\n                console.log('No artists found search again')\n            }\n            else {\n                const artist_obj = artist_arr[0]\n                let track_promise = this.getTrackForArtist(artist_obj.id).then(track => track)\n                this.setState({\n                    initial_artist: {... artist_obj, track_promise: track_promise}\n                })\n            }\n        })\n    }\n  }\n\n  render() {\n        let searchGroup =\n            <form className='input-group input-group-sm'\n                  onSubmit={(e) => {\n                      e.preventDefault();\n                      this.setInitialArtist(this.state.search_query);\n                  }}>\n                <input className='form-control'\n                       onChange={(event) => this.setState({\n                           search_query: event.target.value\n                       })}\n                       value={this.state.search_query}\n                       placeholder=\"Artist name...\"/>\n                <button className='ml-2 mr-1 col-3'\n                        type='submit'>\n                    Go\n                </button>\n            </form>\n\n        return(\n            <div className=\"container-fluid h-100 p-0\">\n                {\n                    !this.state.initial_artist &&\n                    <div className=\"row h-100 no-gutters\">\n                        <div className=\"col-2\"></div>\n                        <div className=\"col-8\">\n                            <div className=\"home-group\">\n                                <p className=\"text-center\">\n                                    This is an interactive music exploration tool built using related artist data from Spotify's Web API.\n                                    Enter an artist name to start a graph.\n                                </p>\n                                <div className=\"row\">\n                                    <div className=\"col-1\"></div>\n                                    <div className=\"col-10\">\n                                        {searchGroup}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                }\n                {\n                    this.state.initial_artist &&\n                    <div>\n                        <div className='h-25'>\n                            <div className='svg-key m-1 p-2'>\n                                <p className='m-0'><b>Hover</b> over a node to hear a sample</p>\n                                <p className='m-0'><b>Click</b> on a node to explore</p>\n                                <p className='m-0'><b>Click</b> on an artist's name to open their Spotify page</p>\n                                <p className='m-0'><b>Click and drag</b> to move the graph</p>\n                                {searchGroup}\n                            </div>\n                        </div>\n                        <Graph initial_artist={this.state.initial_artist}/>\n                    </div>\n                }\n            </div>)\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}